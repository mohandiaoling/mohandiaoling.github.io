<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo 主题的 Learn 文档</title>
    <link>https://mohandiaoling.github.io/</link>
    <description>Recent content on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 26 May 2022 18:59:03 +0800</lastBuildDate><atom:link href="https://mohandiaoling.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>过滤器</title>
      <link>https://mohandiaoling.github.io/%E7%BD%91%E7%9B%98%E6%94%BB%E9%98%B2/%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Thu, 26 May 2022 18:59:03 +0800</pubDate>
      
      <guid>https://mohandiaoling.github.io/%E7%BD%91%E7%9B%98%E6%94%BB%E9%98%B2/%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>过滤器： Filter即为过滤，用于在Servlet之外对Request或者Response进行修改。 具体流程：Filter对用户请求进行预处理，接着将请求交给Servlet进行处理并生成响应，最后Filter再对服务器响应进行后处理。  在一个web应用中，可以开发编写多个Filter，这些Filter组合起来就是Filter链。过滤器可以规定过滤的页面。 在HttpServletRequest到达Servlet之前，拦截客户的HttpServletResquest。根据需要检查HttpServletRequest，也可以修改HttpServletRequest头和数据。 在HttpServletResponse到达客户端之前，拦截HttpServletResponse。根据需要检查HttpServlet，也可以修改HttpServletResponse头和数据。   步骤：  编写java类实现Filter接口，并实现doFilter方法。 通过@WebFilter注解设置其所能拦截的资源。   乱码处理：
1. 处理POST请求 2. 处理GET请求且服务器在Tomcat8以下
具体代码：   package com.test.bean; import javax.servlet.*; import javax.servlet.annotation.WebFilter; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletRequestWrapper; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.UnsupportedEncodingException; //处理乱码问题 /** * 过滤器 * 1、@WebFilter(&amp;#34;/*&amp;#34;) 配置拦截的资源路径 * 2、doFilter()方法中要设置放行，否则无法到达资源（filterChain.doFilter(servletRequest,servletResponse);） * 3、如果是过滤器链，请求时是先配置的先执行（首字母在前的先执行）；而响应时顺序是反过来的 * **/ //拦截的路径，指拦截哪里的资源 //若填&amp;#34;/*&amp;#34;则代表拦截所有的请求 @WebFilter(&amp;#34;/*&amp;#34;) public class Filter1 implements Filter { //初始化 @Override public void init(FilterConfig filterConfig) throws ServletException { } //过滤 @Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain)throws ServletException, IOException{ //基于HTTP HttpServletRequest request=(HttpServletRequest)servletRequest; HttpServletResponse response=(HttpServletResponse)servletResponse; //处理请求乱码（处理POST请求） request.</description>
    </item>
    
    <item>
      <title>常见问题解决链接</title>
      <link>https://mohandiaoling.github.io/%E7%BD%91%E7%9B%98%E6%94%BB%E9%98%B2/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sun, 22 May 2022 23:35:49 +0800</pubDate>
      
      <guid>https://mohandiaoling.github.io/%E7%BD%91%E7%9B%98%E6%94%BB%E9%98%B2/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E9%93%BE%E6%8E%A5/</guid>
      <description> Java教程 IDEA新手使用教程（详解） Java项目开发实战入门 Jetbrains系列产品重置试用方法归档 java.net.BindException: Address already in use: bind 解决端口号被占用 tomcat启动失败：初始化组件[Connector[HTTP/1.1-8080]]失败 解决tomcat正常启动但是对应的网页却无法访问 Tomcat安装及配置 JavaWeb入门登录注册系统 windows无法终止PID的进程，拒绝访问 MySQL 下载安装教程 官网下载mysql的jar包及导入到java项目中 MySQL的详细安装教程 MySQL 教程  MySQL数据库教程视频 JavaWeb教程目录 尚硅谷 2022 最新 IntelliJ IDEA 详细配置步骤演示 IDEA破解教程 IDEA MyEclipse Eclipse 快捷键大全(最终版) Tomcat启动闪退的原因和解决方法 javaweb项目的文件结构 idea中request获取不到getParameter方法 如何查看自己电脑主机的IP地址 IDEA Java web项目搭建以及连接Mysql数据库 通过IntelliJ IDEA软件实现Java项目连接MySQL的详细过程 解决Loading class com.mysql.jdbc.Driver‘. This is deprecated. The new driver class is com.mysql.cj.j 菜鸟教程 Servlet-实现用户的注册功能 Mysql数据库中有哪些数据类型? IntelliJ IDEA 2022.1永久破解激活教程（最新版，亲测可用） CSS参考手册 Java中带返回值方法定义和调用  </description>
    </item>
    
    <item>
      <title>常见问题解决链接</title>
      <link>https://mohandiaoling.github.io/%E7%94%B5%E8%B5%9B/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sun, 22 May 2022 14:51:47 +0800</pubDate>
      
      <guid>https://mohandiaoling.github.io/%E7%94%B5%E8%B5%9B/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E9%93%BE%E6%8E%A5/</guid>
      <description> 立创元器件封装库导入AD的详细教程 立创元器件封装库导入AD AD19&amp;mdash;彻底解决原理图转PCB时，出现failed to add class member及Unknown Pin的问题 AD19导出Gerber文件-嘉立创打板  </description>
    </item>
    
    <item>
      <title>博客使用</title>
      <link>https://mohandiaoling.github.io/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 21 May 2022 01:53:55 +0800</pubDate>
      
      <guid>https://mohandiaoling.github.io/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/</guid>
      <description>博客内容创建
  部署到github
  文本内容编辑
  博客内容创建  创建一个博客网站：hugo new site myblog（站点名，可自定义） 创建章节：hugo new --kind chapter &amp;lt;name&amp;gt;/_index.md 创建章节下页面：hugo new &amp;lt;name&amp;gt;/name.md 若要该页面显示，需删除draft: true 启动站点服务：hugo server   部署到github  在博客目录下打开cmd，输入hugo --theme=hugo-theme-learn --baseUrl=&amp;quot;https://mohandiaoling.github.io&amp;quot; --buildDrafts
会在博客根目录 myblog 生成 public 文件夹，里面就是编译好的静态页面文件。 在public目录下：运行git bash，执行 git init将public文件夹变成 git 本地仓库 执行git add .将文件夹所以文件放入暂存区 执行 git commit -m &amp;quot;提交文件&amp;quot; 提交暂存区到本地仓库中 执行git remote add origin git@github.com:mohandiaoling/mohandiaoling.github.io.git添加远程版本库 然后执行git pull 执行git push -u origin master -f将本地仓库代码推送到远程库 执行git push -u origin master,直到出现Everything up-to-date。 最后，在浏览器中访问 https://mohandiaoling.</description>
    </item>
    
  </channel>
</rss>
